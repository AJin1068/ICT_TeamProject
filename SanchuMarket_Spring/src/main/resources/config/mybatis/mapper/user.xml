<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">
	
<!-- 관리자페이지 회원 목록 검색 조건별로 5개씩조회  -->
	<select id="user_conditionList" parameterType="java.util.Map" resultType="vo.UserVo" >
		
		<!-- 얘는 5개 조회 됨 -->
		select *
		from
			(
			select 
				rank() over(order by u_idx) no, 
				u_name, u_id, u_tel, u_addr, nvl2(u_status,u_status,'활동')u_status
			from(select * from user_market where u_grade='일반회원')
			 <trim prefix="where"  prefixOverrides="or">
		         <if test="u_id!=null">
		             u_id like '%' || #{ u_id } || '%' 
		         </if>
		          <if test="u_name!=null">
		             or u_name like '%' || #{ u_name } || '%'
		         </if>
		          <if test="u_nickname!=null">
		             or u_nickname like '%' || #{ u_nickname } || '%'
		         </if>
		         <if test="u_tel!=null">
		             or u_tel like '%' || #{ u_tel } || '%'
		         </if>
		         <if test="u_status!=null">
		             or u_status like '%' || #{ u_status } || '%'
		         </if>
			 </trim>
			)			
		where no between #{start} and #{end}

	</select>
	
	<!--검색 조건별로 paging을 위한 전체 유저 count-->
	<select id="user_list" resultType="int" parameterType="java.util.Map">
	  
	     select nvl(count(*),0) from user_market
	      <trim prefix="where"  prefixOverrides="or|and">
		         
		         <if test="u_id!=null">
			             u_id like '%' || #{ u_id } || '%' 
			         </if>
			          <if test="u_name!=null">
			             or u_name like '%' || #{ u_name } || '%'
			         </if>
			          <if test="u_nickname!=null">
			             or u_nickname like '%' || #{ u_nickname } || '%'
			         </if>
			         <if test="u_tel!=null">
			             or u_tel like '%' || #{ u_tel } || '%'
			         </if>
			         <if test="u_status!=null">
			             or u_status like '%' || #{ u_status } || '%'
			         </if>
			         and u_grade='일반회원'
		     </trim>
	</select>
	
	<select id="user_idx" resultType="vo.UserVo">
		select * from user_market where u_idx=#{u_idx} 
	</select>
	
	<select id="user_idx_reg" resultType="vo.UserVo">
		select u.*,
		 to_number(floor((sysdate-u_regdate)*24*60*60)) as u_time
		 from (select * from user_market) u where u_idx=#{u_idx} 
	</select>
	
	<select id="check_id" resultType="vo.UserVo">
		select * from user_market where u_id=#{u_id} 
	</select>
	
	<select id="check_email" resultType="vo.UserVo">
		select * from user_market where u_mail=#{u_mail} 
	</select>
	
	<select id="check_nickname" resultType="vo.UserVo">
		select * from user_market where u_nickname=#{u_nickname} 
	</select>
	
	<select id="check_emailAndId" resultType="int" parameterType="vo.UserVo">
	   select count(*) from user_market where u_id=#{u_id} and u_mail=#{u_mail}
	</select>
	
	<!-- 탈퇴시 비밀번호 체크 -->
	<select id="check_pwd" resultType="vo.UserVo" parameterType="java.util.Map">
	   select * from user_market where u_pwd=#{u_pwd} and u_idx=#{u_idx}
	</select>
	
	
	<!--아이디찾기-->
	<select id="findId" resultType="java.lang.String" parameterType="vo.UserVo">
		select u_id from user_market where u_name=#{u_name} and u_tel=#{u_tel}
	</select>
	
	<!--admin 가입 회원 연도별 조회-->
	<select id="annual_enroll_count" resultType="vo.UserVo">
	select to_char(u_regdate,'mm') as u_month, count(*) as u_tot
	from user_market
	where to_char(u_regdate,'yy')=to_char(sysdate,'yy') 
	group by to_char(u_regdate,'mm') order by to_char(u_regdate,'mm') asc
	</select>
	
	<!--admin 탈퇴 회원 연도별 조회-->
	<select id="annual_withdrawl_count" resultType="vo.WithdrawlVo">
	select to_char(w_date,'mm') as w_month, count(*) as w_tot
	from withdrawl
	where to_char(w_date,'yy')=to_char(sysdate,'yy') 
	group by to_char(w_date,'mm') order by to_char(w_date,'mm') asc
	</select>
	
	
	<!--u_photo/u_like/u_profile은 처음 가입시 null/0-->
	<insert id="user_insert" parameterType="vo.UserVo">
	insert into user_market values(
									(select nvl(max(u_idx)+1,1)from user_market),
									#{u_id}, 
									#{u_pwd}, 
									#{u_name}, 
									#{u_nickname},
		                            #{u_birth}, 
		                            #{u_addr}, 
		                            sysdate, 
		                            0, 
		                            '안녕하세요',
									'no_file',
									#{u_tel}, 
									#{u_mail}, 
									'일반회원', 
									#{u_ip},
									#{postcode},
									'활동',
									0
								   )
	</insert> 
	
	<update id="user_update" parameterType="vo.UserVo">
		update user_market
			set 
				u_name=#{u_name},
				u_id=#{u_id},
				u_pwd=#{u_pwd},
				u_zipcode=#{u_zipcode},
				u_addr=#{u_addr)
		where u_idx=#{u_idx}
	</update>
	
	<!-- 회원상태 업데이트 -->
	<update id="user_status_update" parameterType="java.util.Map">
		update user_market 
			set
				u_status=#{u_status}
			where u_idx=#{ u_idx }
	</update>
	<!-- 회원상태 업데이트2, 탈퇴회원테이블 저장 -->
	<insert id="insert_Withdrawl" parameterType="vo.WithdrawlVo">
	   insert into withdrawl values
		   (
		   		#{u_idx},
		   		sysdate
		   )
	
	</insert>
	<!-- 회원정보수정 -->
	<update id="user_info_update" parameterType="vo.UserVo">
		update user_market
			set
				u_name=#{u_name},
				u_birth=#{u_birth},
				u_tel=#{u_tel},
				u_profile=#{u_profile},
				u_photo=#{u_photo},
				postcode=#{postcode},
				u_addr=#{u_addr}
		where u_idx=#{u_idx}
	</update>
	
	<!-- 회원정보수정, 이미지수정없음 -->
	<update id="user_info_update_noImg" parameterType="vo.UserVo">
		update user_market
			set
				u_name=#{u_name},
				u_birth=#{u_birth},
				u_tel=#{u_tel},
				u_profile=#{u_profile},
				postcode=#{postcode},
				u_addr=#{u_addr}
		where u_idx=#{u_idx}
	</update>
	
	<!--임시비밀번호로 갱신-->
	<update id="pwd_update" parameterType="vo.UserVo">
	   update user_market set u_pwd=#{u_pwd} where u_mail=#{u_mail}
	</update>
		
	<delete id="withdraw_account" parameterType="java.lang.String">
	   delete from user_market where u_id=#{u_id}
	</delete>
	
	<select id="enroll_count" resultType="int">
		select count(*) from user_market where to_char(u_regdate,'dd') = to_char(sysdate, 'dd')	
	</select>
	
</mapper>












